COMPILING_TEXT 	   := @echo -e "\033[0m \033[0;33m Compiling:\033[0m"
COMPILING_TEXT_OK  := @echo -e "\033[0m \033[0;32m [All compiled succesfully]\033[0m"
LINKING_TEXT       := @echo -e "\033[0m \033[0;33m Linking...\033[0m"
LINKING_TEXT_OK    := @echo -e "\033[0m \033[0;32m [Linked succesfully]\033[0m"
ALL_CLEANED_TEXT   := @echo -e "\033[0m \033[0;32m [Cleaned succesfully]\033[0m"
CLENGINE_CLEANED_TEXT   := @echo -e "\033[0m \033[0;32m [CLEngine cleaned succesfully]\033[0m"
SRC_CLEANED_TEXT   := @echo -e "\033[0m \033[0;32m [SRC cleaned succesfully]\033[0m"
#EXECUTING_TEXT     := @echo -e "\033[0m \033[5;32m Executing...\033[0m"
JUMP_LINE		   := @echo



SOURCES  	:= $(wildcard *.cpp)

NAME_EXE	:= IntoTheCrops.exe
CXXFLAGS 	+= -Wall -Wno-unknown-pragmas -std=c++20 -static-libgcc -static-libstdc++ # el no-unknown-pragmas es para que no salga el warning de los pragma region

# Objs del juego

OBJ_PATH    := obj
SRC_PATH	:= src

ALLCPPS		:= $(shell find src/ -type f -iname *.cpp)
ALLCPPSOBJ	:= $(patsubst $(SRC_PATH)/%.cpp,$(OBJ_PATH)/%.o,$(ALLCPPS))
SUBDIRS		:= $(shell find src/ -type d)
OBJSUBDIRS  := $(patsubst $(SRC_PATH)%,$(OBJ_PATH)%,$(SUBDIRS))

ALLCS		:= $(shell find src/ -type f -iname *.c)
ALLCSOBJ	:= $(patsubst $(SRC_PATH)/%.cpp,$(OBJ_PATH)/%.o,$(ALLCS))

# Objs de CLEngine

OBJ_CLE_PATH    := obj
SRC_CLE_PATH  	:= src
MAIN_CLE		:= obj/main.o


ifdef DEBUG
	CXXFLAGS += -g
else
	CXXFLAGS += -O3
endif


# gr√°ficos
LIBS 	    	+= -L./lib/windows -lglfw3 -lglfw3dll -lopengl32
LIBS 	    	+= -lglew32
LIBS 	    	+= -lassimp


# fmod
LIBS 	    	+= -lfmod -lfmodstudio -Wl,-rpath=lib/windows/ 

LIBS			+= -lstdc++ #-llibstdc++-6


INCLUDE     :=  -lssp -I./lib/windows -I./src/fmod/core/inc -I./src/fmod/studio/inc -I./src/fmod/fsbank/inc 
CC			:= x86_64-w64-mingw32-g++ # sin posix no podemos utilizar thread ni mutex

C			:= x86_64-w64-mingw32-gcc 


#CC			:= x86_64-w64-mingw32-g++



#Esto crea el ejecutable
$(NAME_EXE): $(OBJSUBDIRS) $(ALLCPPSOBJ) $(ALLCSOBJ) 
	$(COMPILING_TEXT_OK)
	$(JUMP_LINE)
	$(LINKING_TEXT) 
	$(CC) -o $(NAME_EXE) $(ALLCSOBJ) $(ALLCPPSOBJ)  $(INCLUDE) $(LIBS) $(CXXFLAGS)
	$(LINKING_TEXT_OK)
	$(JUMP_LINE)


#Esto compila y crea los .o (aqui aun no entra en juego el linker)
$(OBJ_PATH)/%.o: $(SRC_PATH)/%.cpp
	$(PRUEBA_TEXT)
	$(COMPILING_TEXT) $<
	@$(CC) $(CXXFLAGS) -o $@ -c $^ $(INCLUDE)
	

$(OBJSUBDIRS):
	@mkdir -p $(OBJSUBDIRS)

.PHONY: gl
gl:
	$(MAKE) -C CLEngine/

info:
	$(info $(ALLCPPSOBJ_CLE))

.PHONY: exe_gl
exe_gl:
	@sh ./CLEngine.sh

.PHONY: exe
exe:
	$(CREATE_SYMLINKS)
	@sh ./$(NAME_EXE).sh

.PHONY: clean_all
clean_all:
	@make clean_gl ; make clean

.PHONY: clean_gl
clean_gl:
	@rm -Rf obj/CLEngine || rm -f $(NAME_EXE)
	$(CLENGINE_CLEANED_TEXT)

.PHONY: clean
clean:
	@rm -Rf obj/src || rm -f $(NAME_EXE)
	$(SRC_CLEANED_TEXT)

.PHONY: all
all:
	@make clean_all ; make ; make gl ; make exe